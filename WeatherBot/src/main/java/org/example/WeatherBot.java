//WeatherBot.java
package org.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import java.time.Duration;
import java.time.LocalTime;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WeatherBot extends TelegramLongPollingBot {
    private static final Logger logger = LoggerFactory.getLogger(WeatherBot.class);

    // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    public WeatherBot() {
        super(); // –í—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞
        startScheduler(); // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    }

    // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    private void startScheduler() {
        logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...");

        // –£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ (8:00)
        scheduler.scheduleAtFixedRate(() -> sendNotifications(1), getDelayUntil(8, 0), 24 * 60, TimeUnit.MINUTES);

        // –î–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (12:00)
        scheduler.scheduleAtFixedRate(() -> sendNotifications(2), getDelayUntil(12, 0), 24 * 60, TimeUnit.MINUTES);

        // –í–µ—á–µ—Ä–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ (18:00)
        scheduler.scheduleAtFixedRate(() -> sendNotifications(3), getDelayUntil(18, 0), 24 * 60, TimeUnit.MINUTES);
    }

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    private long getDelayUntil(int hour, int minute) {
        LocalTime now = LocalTime.now(); // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        LocalTime targetTime = LocalTime.of(hour, minute); // –í—Ä–µ–º—è, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É

        long delay;
        if (now.isBefore(targetTime)) {
            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–Ω—å—à–µ —Ü–µ–ª–µ–≤–æ–≥–æ, –∑–∞–¥–µ—Ä–∂–∫–∞ = —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ü–µ–ª–µ–≤—ã–º –∏ —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            delay = Duration.between(now, targetTime).toMinutes();
        } else {
            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ–∑–∂–µ —Ü–µ–ª–µ–≤–æ–≥–æ, –∑–∞–¥–µ—Ä–∂–∫–∞ = —Ä–∞–∑–Ω–∏—Ü–∞ –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
            delay = Duration.between(now, targetTime.plusHours(24)).toMinutes();
        }

        logger.info("–ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ {}:{}: {} –º–∏–Ω—É—Ç", hour, minute, delay);
        return delay;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    private void sendNotifications(int notificationTime) {
        logger.info("–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏: {}", notificationTime);

        for (Map.Entry<Long, UserData> entry : userDataMap.entrySet()) {
            long chatId = entry.getKey();
            UserData userData = entry.getValue();

            if (userData.getNotificationTime() == notificationTime || userData.getNotificationTime() == 4) {
                logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (Chat ID: {}).", chatId);
                handleWeatherRequest(chatId);
            }
        }
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    @Override
    public void onClosing() {
        scheduler.shutdown();
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
        super.onClosing();
    }

    // –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    private final Map<Long, UserData> userDataMap = new HashMap<>();

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
    private static final String WEATHER_BUTTON = "üå§Ô∏è –ü–æ–≥–æ–¥–∞";
    private static final String SETTINGS_BUTTON = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏";
    private static final String CHANGE_CITY_BUTTON = "üèôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥";
    private static final String CHANGE_NOTIFICATION_BUTTON = "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É";
    private static final String[] NOTIFICATION_OPTIONS = {"üö´ –ù–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", "üåÖ –£—Ç—Ä–æ–º", "üåû –î–Ω—ë–º", "üåÜ –í–µ—á–µ—Ä–æ–º", "üåûüåÜ –í–µ—Å—å –¥–µ–Ω—å"};


    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage()) {
            Message message = update.getMessage();
            long chatId = message.getChatId();
            String text = message.getText();

            logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Chat ID: {}): {}", chatId, text);

            if (text.equals("/start")) {
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (Chat ID: {}) –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.", chatId);
                sendWelcomeMessage(chatId);
            } else if (text.equals(WEATHER_BUTTON)) {
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (Chat ID: {}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–≥–æ–¥—É.", chatId);
                handleWeatherRequest(chatId);
            } else if (text.equals(SETTINGS_BUTTON)) {
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (Chat ID: {}) –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", chatId);
                sendSettingsMenu(chatId);
            } else if (text.equals(CHANGE_CITY_BUTTON)) {
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (Chat ID: {}) –≤—ã–±—Ä–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.", chatId);
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:");
            } else if (text.equals(CHANGE_NOTIFICATION_BUTTON)) {
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (Chat ID: {}) –≤—ã–±—Ä–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.", chatId);
                sendNotificationOptions(chatId);
            } else if (isNotificationOption(text)) {
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (Chat ID: {}) –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {}", chatId, text);
                handleNotificationSelection(chatId, text);
            } else {
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (Chat ID: {}) –≤–≤—ë–ª –≥–æ—Ä–æ–¥: {}", chatId, text);
                handleCityInput(chatId, text);
            }
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    private void sendWelcomeMessage(long chatId) {
        String welcomeText = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.\n\n" +
                "–î–ª—è –Ω–∞—á–∞–ª–∞, —Å–∫–∞–∂–∏, –∏–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?";
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (Chat ID: {}).", chatId);
        sendMessage(chatId, welcomeText);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
    private void handleCityInput(long chatId, String city) {
        UserData userData = userDataMap.getOrDefault(chatId, new UserData(chatId, city, 0));
        userData.setCity(city);
        userDataMap.put(chatId, userData);

        logger.info("–ì–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Chat ID: {}) —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {}", chatId, city);

        String response = "‚úÖ –ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: " + city + "\n\n" +
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ:";
        sendNotificationOptions(chatId);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ü–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    private void sendNotificationOptions(long chatId) {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        for (String option : NOTIFICATION_OPTIONS) {
            KeyboardRow row = new KeyboardRow();
            row.add(option);
            keyboard.add(row);
        }

        keyboardMarkup.setKeyboard(keyboard);
        keyboardMarkup.setResizeKeyboard(true);

        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ü–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (Chat ID: {}).", chatId);
        sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏:", keyboardMarkup);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    private void handleNotificationSelection(long chatId, String selectedOption) {
        UserData userData = userDataMap.get(chatId);
        if (userData != null) {
            int notificationTime = getNotificationTimeFromOption(selectedOption);
            userData.setNotificationTime(notificationTime);
            userDataMap.put(chatId, userData);

            logger.info("–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Chat ID: {}) –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {}", chatId, selectedOption);

            String response = "‚úÖ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: " + selectedOption + "\n\n" +
                    "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.";
            sendMainMenu(chatId, response);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏
    private int getNotificationTimeFromOption(String option) {
        switch (option) {
            case "üåÖ –£—Ç—Ä–æ–º":
                return 1;
            case "üåû –î–Ω—ë–º":
                return 2;
            case "üåÜ –í–µ—á–µ—Ä–æ–º":
                return 3;
            case "üåûüåÜ –í–µ—Å—å –¥–µ–Ω—å":
                return 4;
            default:
                return 0;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    private void sendMainMenu(long chatId, String text) {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add(WEATHER_BUTTON);
        row.add(SETTINGS_BUTTON);
        keyboard.add(row);

        keyboardMarkup.setKeyboard(keyboard);
        keyboardMarkup.setResizeKeyboard(true);

        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (Chat ID: {}).", chatId);
        sendMessageWithKeyboard(chatId, text, keyboardMarkup);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    private void sendSettingsMenu(long chatId) {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add(CHANGE_CITY_BUTTON);
        row.add(CHANGE_NOTIFICATION_BUTTON);
        keyboard.add(row);

        keyboardMarkup.setKeyboard(keyboard);
        keyboardMarkup.setResizeKeyboard(true);

        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (Chat ID: {}).", chatId);
        sendMessageWithKeyboard(chatId, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", keyboardMarkup);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã
    private void handleWeatherRequest(long chatId) {
        UserData userData = userDataMap.get(chatId);
        if (userData != null) {
            String city = userData.getCity();
            logger.info("–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: {} (Chat ID: {}).", city, chatId);

            try {
                WeatherData weatherData = WeatherApiClient.fetchWeatherData(city, Config.OPENWEATHERMAP_API_KEY);
                if (weatherData != null) {
                    String response = formatWeatherResponse(city, weatherData);
                    logger.info("–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã (Chat ID: {}).", city, chatId);
                    sendMessage(chatId, response);
                } else {
                    logger.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {} (Chat ID: {}).", city, chatId);
                    sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞: " + city);
                }
            } catch (Exception e) {
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: {} (Chat ID: {}).", city, chatId, e);
                sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.");
            }
        } else {
            logger.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (Chat ID: {}) –Ω–µ —É–∫–∞–∑–∞–ª –≥–æ—Ä–æ–¥.", chatId);
            sendMessage(chatId, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥.");
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ
    private String formatWeatherResponse(String city, WeatherData weatherData) {
        return String.format("üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ %s:\n" +
                        "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %d¬∞C\n" +
                        "üå°Ô∏è –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: %d¬∞C\n" +
                        "üå¨Ô∏è –í–µ—Ç–µ—Ä: %d –º/c\n" +
                        "üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: %d%%\n" +
                        "üå°Ô∏è –î–∞–≤–ª–µ–Ω–∏–µ: %d –≥–ü–∞\n" +
                        "üåÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %d¬∞C\n" +
                        "üåû –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %d¬∞C",
                city, weatherData.getTemperature(), weatherData.getFeelsLike(),
                weatherData.getWindSpeed(), weatherData.getHumidity(), weatherData.getPressure(),
                weatherData.getMinTemp(), weatherData.getMaxTemp());
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –æ–ø—Ü–∏–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    private boolean isNotificationOption(String text) {
        for (String option : NOTIFICATION_OPTIONS) {
            if (option.equals(text)) {
                return true;
            }
        }
        return false;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    private void sendMessageWithKeyboard(long chatId, String text, ReplyKeyboardMarkup keyboardMarkup) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (Chat ID: {}).", chatId);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (Chat ID: {}).", chatId, e);
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        try {
            execute(message);
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (Chat ID: {}): {}", chatId, text);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è (Chat ID: {}).", chatId, e);
        }
    }

    @Override
    public String getBotUsername() {
        return "WeatherBot";
    }

    @Override
    public String getBotToken() {
        return Config.BOT_TOKEN;
    }

    // –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    public static void main(String[] args) {
        try {
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...");
            TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
            botsApi.registerBot(new WeatherBot());
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.");
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.", e);
        }
    }
}